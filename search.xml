<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GTD时间管理法</title>
    <url>/2021/05/30/GTD%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%B3%95/</url>
    <content><![CDATA[<p>&lt;%+ tp.file.rename(tp.frontmatter.title) %&gt;</p>
<p><code>updated: &lt;%+ tp.file.last_modified_date() %&gt;</code></p>
<hr>
<h1 id="lt-tp-frontmatter-title-gt"><a href="#lt-tp-frontmatter-title-gt" class="headerlink" title="&lt;%+ tp.frontmatter.title %&gt;"></a>&lt;%+ tp.frontmatter.title %&gt;</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GTD就是<strong>Getting Things Done</strong>的缩写，意思是“把需要做的事情处理好”，是一个管理时间的方法。由David Allen(戴维·艾伦)于2002年12月31日提出。GTD的核心理念概括就是必须记录下来要做的事，然后整理安排并使自己一一去执行。GTD的五个核心原则是：<strong>收集、整理、组织、回顾、执行</strong>。</p>
<p>GTD的核心理念在于清空大脑，然后一步步按照设定的路线去努力执行。</p>
<h2 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h2><h3 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h3><p>主要原则在于一个人需要通过记录的方式把头脑中的各种任务<strong>移出来</strong>，通过这样的方式，头脑可以不用塞满各种需要完成的事情，而集中精力在正在完成的事情，是一种<strong>消灭压力的高效工作方法</strong>。</p>
<h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><p>把任何需要跟踪或者记住或者做的事情记在Allen称之为‘水桶’的地方：一个收件箱，电子邮箱，磁带，笔记本，PDA，或者它们的组合。把你脑子里的任何东西都拿出来放到你的搜集设备里，准备好做下一步的处理。每星期所有的水桶都应该被至少清空一次。</p>
<h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>处理你的收件箱要遵循一个严格的工作流程：</p>
<p>从最上面开始；</p>
<p>一次处理一项；</p>
<p>不把任何东西放回收件箱；</p>
<p>如果任何一项需要做：</p>
<p>做（如果花的时间少于两分钟）；</p>
<p>委托别人完成；</p>
<p>或者把它延期；</p>
<p>否则，</p>
<p>把它存档以便查询，</p>
<p>把它扔掉，</p>
<p>或者使它成熟以便下一步的处理。</p>
<p><strong>两分钟原则</strong>：任何事情如果花的时间少于两分钟，那么马上就去做。两分钟是一个分水岭，这样的时间和正式地推迟一个动作所花的时间差不多。</p>
<h3 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h3><p>Allen描述了一个建议的列表集合，你可以用来跟踪需要关注的项目：</p>
<ul>
<li><p><strong>下一步行动(Next actions)</strong> 对于每个需要你关注的事项，定好什么是你可以实际采取的下一步行动。例如，如果事项为“写项目报告”，下一步行动可能 会是“给Fred发邮件开个简短会议”，或者“给Jim打电话问报告的要求”，或者类似的事情。虽然要完成这个事项，可能会有很多的步骤和行动，但是其中一定会有你需要首先去做的事情，这样的事情就应该被记录在“下一步行动”列表上。较好的做法是把这些事项根据能够被完成的“环境”整理分类，例如“在办公室”,“用电话”,“在商场”。</p>
</li>
<li><p><strong>项目(Projects)</strong> 每个需要多于一个实际的行动才能达到的生活或者工作中的“开放式回路”就是一个“项目”。使用跟踪以及周期性的回顾来确保每个项目 都有一个下一步的行动进行下去。</p>
</li>
<li><p><strong>等待(Waiting for)</strong> 当你已经指派了一个事项给其他人或者在项目进行下去之前需要等待外部的事件，就应当在你的系统当中跟踪以及定期检查是否已经可以采取行动或者需要发出一个提醒。</p>
</li>
<li><p><strong>将来/可能(Someday/Maybe)</strong> 这些事情你需要在某个点去做，但是不是马上。例如：“学习中文”，或者“进行一个潜水假期”。</p>
</li>
</ul>
<p>对于跟踪你的预约和委托，一个日历也是重要的；另外，Allen特别推荐日历应该被用在他所谓的“硬工程”上：必须在某个特定的期限之前完成的事情，或者在约定的时间和地点完成的会议和约会。“待办”事项应该用在下一步行动列表当中。</p>
<p>GTD的最后一个关键组织模块是<strong>归档系统</strong>：</p>
<p>“Getting Things Done”书里说如果要用一个归档系统，那它必须得是简单易用和有趣。即使是一张纸，如果你需要用来记录参考信息，如果不属于你已经有的一个目录，也要有自己的文件组织方式。Allen的建议是你可以维护一个按照字母顺序组织的归档系统，这样可以比较容易快速的存储和提取你所想要的信息。Google的Gmail的用户可以用创建标签的方式来创建“待办事项”和“项目”，这种方式在Bryan Murdaugh的 “Getting Things Done with Gmail”白皮书中有清楚的描述。它保留了很多GTD的相同概念，但是是在在线的电子邮件系统中实施。</p>
<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>如果你不至少每天或者只要你有时间就回顾检查，那么你的行动和提醒的列表将会变的毫无用处。以你当时拥有的精力，资源和时间，决定什么是对你来说最重要的事情，然后做。如果你倾向于拖延，你可能会老是做最容易的事情，避免那些难的。为了解决这个问题，你可以一个接一个地做列表上的事情，按照它们的顺序，就象你处理你的收件箱一样。</p>
<p>至少以星期为周期，GTD要求你回顾所有你比较主要的“行动”,“项目”和“等待”的事项，确保所有的新任务或者即将到来的事件都进入你的系统，而且所有的事情都更新到符合最新的情况。Allen建议制作一个难题档案来帮助你更新你关于主要行动的记忆。</p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>如果你把你的时间都花在组织工作，而不是做它们，那么所有的GTD系统都是不好用的！David Allen的观点是，如果你可以把必须做的事情，让它变得简单、容易、有趣的话，那你就比较不会拖延、或者被太多的“开放性回路”所压倒。</p>
<h2 id="主要理念"><a href="#主要理念" class="headerlink" title="主要理念"></a>主要理念</h2><p>GTD的核心理念在于只有<strong>将你心中所想的所有的事情都写下来并且安排好下一步的计划</strong>，你才能够心无挂念，全力以赴地做好眼前的工作，提高效率。<br>而当你总是有些事萦绕在心头，悬而未决的时候，你要么就是会不时地想起它而影响眼前的工作，要么就是会忘记了去做。<br>而GTD通过将所有的这些事都罗列出来再进行分类，确定下一步的处理方法，将所有这些悬而未决之事都纳入我们可控制的一个管理体系中。</p>
<p>GTD认为人生最大的不安的来源不是事情太多，而是有很多事情你该做却没有做，你跟人说了你要做却没有做。GTD就是要<strong>确保你所有该做的事情都做到</strong>。DavidAllen认为，<strong>压力不是来自任务本身，而是任务在大脑里的混沌塞积，造成心理的焦虑和抵触。</strong> 我们要做的，就是逐一清点大脑里的这些事务，将所有未尽事宜通通捕获并收集在大脑之外的文件系统中，比如实实在在的工具篮、纸质记事簿、电子记事簿和邮箱等。</p>
<p>GTD 其实就是两点：</p>
<ol>
<li><strong>清空</strong>你大脑的内存： 通常一件事情在你脑袋里所占的空间大小和你现实中已经完成多少成反比。把所有要做的事情分门别类，另外存放在一个逻辑性强而又可靠的系统中去。大脑是用来思考的，不是用来记事的。我们的大脑每天耗费太多时间提醒我们该做又没做的事情，应该把大脑从这种思维中解放出来。</li>
<li>把任何任务和项目具体成<strong>行动</strong>： 不管是什么任务项目，我们要问的问题是下一个动作是什么？只有这样才能把计划具体化，才能让我们随时把握该 做什么。这样一来，在一个给定时间具体采取一个给定行动（action）的时候，我们才能做出最好的选择，而且对自己的行动选择有信心。</li>
</ol>
<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>GTD的具体做法可以分成收集、整理、组织、回顾与行动五个步骤。</p>
<ol>
<li><p>收集：就是将你能够想到的所有的未尽事宜（未整理的念头）（GTD中称为stuff）统统罗列出来，放入inbox中，这个inbox既可以是用来放置各种实物的实际的文件夹或者篮子，也需要有用来记录各种事项的纸张或PDA。收集的关键在于把一切赶出你的大脑，记录下所有的工作 。</p>
</li>
<li><p>整理：将stuff放入inbox之后，就需要定期或不定期地进行整理，清空inbox。将这些stuff按是否可以付诸行动进行区分整理，对于不能付诸行动的内容，可以进一步分为参考资料、日后可能需要处理以及垃圾类，而对可行动的内容再考虑是否可在两分钟内完成，如果可以则立即行动完成它，如果不行对下一步行动进行组织 。</p>
</li>
<li><p>组织：个人感觉组织是GTD中的最核心的步骤，组织主要分成对参考资料的组织与对下一步行动的组织。对参考资料的组织主要就是一个文档管理系统，而对下一步行动的组织则一般可分为：下一步行动清单，等待清单和未来/某天清单。</p>
<p> 等待清单主要是记录那些委派他人去做的工作，未来/某天清单则是记录延迟处理且没有具体的完成日期的未来计划、电子等等。而下一步清单则是具体的下一步工作，而且如果一个项目涉及到多步骤的工作，那么需要将其细化成具体的工作。</p>
<p> GTD对下一步清单的处理与一般的to-do list最大的不同在于，它作了进一步的细化，比如按照地点(context)（电脑旁、办公室、电话旁、家里、超市）分别记录只有在这些地方才可以执行的行动，而当你到这些地点后也就能够一目了然地知道应该做那些工作</p>
</li>
<li><p>回顾：回顾也是GTD中的一个重要步骤，一般需要每周进行回顾与检查，通过回顾及检查你的所有清单并进行更新，可以确保GTD系统的运作，而且在回顾的同时可能还需要进行未来一周的计划工作。</p>
</li>
<li><p>执行：你可以按照每份清单开始行动了，在具体行动中可能会需要根据所处的环境，时间的多少，精力情况以及重要性来选择清单以及清单上的事项来行动。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>时间管理</tag>
        <tag>方法论</tag>
        <tag>gtd</tag>
      </tags>
  </entry>
  <entry>
    <title>卢曼卡片盒笔记法</title>
    <url>/2021/05/30/%E5%8D%A2%E6%9B%BC%E5%8D%A1%E7%89%87%E7%9B%92%E7%AC%94%E8%AE%B0%E6%B3%95/</url>
    <content><![CDATA[<p>&lt;%+ tp.file.rename(tp.frontmatter.title) %&gt;</p>
<p><code>updated: &lt;%+ tp.file.last_modified_date() %&gt;</code></p>
<hr>
<h1 id="lt-tp-frontmatter-title-gt"><a href="#lt-tp-frontmatter-title-gt" class="headerlink" title="&lt;%+ tp.frontmatter.title %&gt;"></a>&lt;%+ tp.frontmatter.title %&gt;</h1><p><a href="https://zettelkasten.de/introduction/zh/">卢曼卡片盒笔记法介绍 (Introduction to the Zettelkasten Method) • Zettelkasten Method</a><br>This is a Chinese translation to Sascha’s <a href="https://zettelkasten.de/introduction/">Introduction to the Zettelkasten Method</a>, created and generously provided to us by <a href="https://www.zhihu.com/people/cai-zhi-xiang">Zhixiang Cai</a> who holds a Ph.D in Oil and Gas Well Engineering, is a programmer, and loves knowledge management.</p>
<p><a href="https://zettelkasten.de/introduction/">English Original</a> • Chinese Translation</p>
<hr>
<p>术语回顾</p>
<ul>
<li><strong>卡片盒笔记系统</strong>：英文/德语 Zettelkasten，将笔记相互连接形成一个网状结构的超文本笔记系统，它是一个工具，是你的伙伴。</li>
<li><strong>卡片盒笔记法</strong>：英文 Zettelkasten Method，建立卢曼笔记系统用到的的一些具体方法</li>
<li><strong>笔记卡片</strong>：英文/德语 Zettel，原指一张用来记录笔记的小纸片，现指使用卢曼笔记法记录的一条单独的笔记</li>
<li><strong>想法</strong>：英文 Thought，卢曼笔记法要求每条笔记只记录一个 thought，thought 在中文中含义非常丰富，可以是一个术语、概念、理论、看法、点子，突然的灵感等等，这些在本文中统称为“想法”</li>
<li><strong>思之想网</strong>：英文 Web of Thought，由各种想法互相连接形成的网络，卢曼笔记系统就是一张思想之网</li>
<li><strong>链接</strong>：英文 Link，名词，指代每条笔记的 ID</li>
<li><strong>连接</strong>：英文 Link/Connect，动词，指将一条笔记与另一条笔记连接起来的动作/操作</li>
</ul>
<p><strong>以下为文章正文</strong>。</p>
<hr>
<p>你看这篇介绍的原因是什么？你可能在工作中遇到了迫切需要解决的问题，可能被硕士论文压得喘不过来气，你想要提升你的博客水平，想写一本书，或者想在科研上更进一步。但是有一点需要明确，卡片盒笔记法不仅是一个帮助你完成工作或项目的工具，更是管理你生活中所遇到的知识的方法。</p>
<p>卡片盒笔记法可以放大你在知识型工作(knowledge work)中的努力。它非常有效，且乐趣十足。有人甚至认为它在成瘾性上可以媲美魔兽世界，让人欲罢不能。</p>
<p>就像游泳一样，如果你不下水，你永远无法体会游泳的乐趣。如果你只是抱着浮板在水中扑腾，那么游泳对你来说也是一件糟糕的事。但是，如果你掌握了游泳技巧，并尝试在水中滑行，那你一定能感受到游泳的魅力。</p>
<p>卡片盒笔记法也需要练习。起初你可能会觉得怎么做都不对，但是只要你稍加练习并保持耐心，你肯定会对卡片盒笔记法回馈给你的知识珍宝感到惊讶。</p>
<p>本篇指南是引导你迈出通向<em>卓越(卡片盒笔记系统世界)</em> 的第一步，遵循本文的方法，你的卡片盒笔记系统你提供一个在知识的海洋中奋勇前进的有力工具。</p>
<p>对于那些不熟悉卡片盒笔记系统，我会这样定义它：</p>
<blockquote>
<p>卡片盒笔记系统是一款个性化的，用于思考和写作的工具。它具有超文本(hypertext)的特点，让你的所思所想互相连接形成网络。与其他系统不同的是，你创造的是一张由你的想法、看法、灵感、或者遇到的具体的知识组成的思想之网(web of thoughts)，而不是孤立的笔记。它强调笔记之间的连接关系，而非把所有笔记堆在一起。</p>
</blockquote>
<p>我们今天所知的卡片盒笔记法，由尼克拉斯-卢曼(Niklas Luhmann) 创造并发扬光大，它是目前最强大的思考和笔记工具。</p>
<h2 id="卢曼的卡片盒笔记系统"><a href="#卢曼的卡片盒笔记系统" class="headerlink" title="卢曼的卡片盒笔记系统"></a>卢曼的卡片盒笔记系统</h2><p>尼克拉斯-卢曼是一位高产的社会学家，他出版了50本专著和600篇论文。他的生产力不是已发表的作品能够体现的，他的遗产中还有150份未完成的手稿，其中一份稿件的长度甚至超过1000页。当然，这些成就不是他一个人的取得的，他还有一位得力的伙伴——Zettelkasten。</p>
<p>卢曼曾说，他的生产力源自于他与卡片盒笔记系统的合作。践行 卡片盒笔记法 的人对此一定很有共鸣。卢曼的卡片盒笔记系统是记有笔记的纸质小卡片的集合，但是这些卡片被做了一点点改变：它们是<strong>超文本</strong>。利用超文本的笔记，卢曼能够以合理的时间和精力浏览抽屉柜中的所有存放笔记卡片。但是，“合理”二字仅对卢曼而言，他痴迷于社会学理论，是一个精力十足的工作狂。</p>
<blockquote>
<p>译者注：超文本中的文字包含有可以连接到其他字段或者文档的超链接，允许从当前阅读位置直接切换到超链接所指向的文字。——<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC">超文本 - 维基百科，自由的百科全书</a></p>
</blockquote>
<p>超文本内的在属性要求它可以通过链接从一段文字跳转到链接所指向的另一段文字。在维基百科上的某个页面下，你只需点击页面中的一个链接，就可以进入新的页面。如果超文本不是网页而是纸质的卡片，则需要付出更多的精力来跟随(follow)一个链接进入新的卡片。另外，你还需要一个入口，这个入口类似于维基百科的搜索框。卢曼创造了他的 Zettelkasten，并设计了进入卡片盒笔记系统的入口和一整套方法论，这让它他能够以一种高效的方式从一条笔记冲浪到另一条笔记。</p>
<p>即便如此，使用纸质的卡片盒笔记系统也是比较困难和耗费精力的（想象以下你要从几万张卡片里找到你需要的某些卡片）。我们比卢曼幸运，可以使用强大的数字工具。因此，我们不需要是卢曼一样的工作狂，也能从卡片盒笔记法中获益。</p>
<h3 id="我们为什么对卢曼的卡片盒笔记系统如此感兴趣？"><a href="#我们为什么对卢曼的卡片盒笔记系统如此感兴趣？" class="headerlink" title="我们为什么对卢曼的卡片盒笔记系统如此感兴趣？"></a>我们为什么对卢曼的卡片盒笔记系统如此感兴趣？</h3><p>首先，幻想以下，如果能像卢曼一样高产意味着什么(50本专著、600篇论文和150分未完成的手稿)？卢曼的卡片盒笔记系统激励着人们，<em>似乎</em>掌握了这个方法也能提高自己的生产力，这也是为什么人们对他独特的创作方式越来越感兴趣的原因。</p>
<p>其次，卢曼的卡片盒笔记系统的确能够对常规的笔记法和知识型工作(knowledge work)的方法有相当大的改进。它可以提高你的效率，让你用更少的时间产出更多的成果。它主要从以下几方面改进常规的笔记法：</p>
<ol>
<li><strong>让我们的想法互相之间更好地建立联系</strong>。卡片盒笔记系统的超文本性质是我们能够将所思所想，包括但不限于概念、术语、灵感、对事情的看法、对模型的认识以及模型参数等等建立联系。而常规笔记法，比如将笔记写在笔记本上，我们很难将记录在第一页的想法与记录在倒数第五页的想法建立可以直接跳转的明确的联系。而想法之间的相互联系有助于产生创新的见解(insight)，创新不是无源之水无本之木，创新是各种想法互相联系时产生的意想不到的结果。</li>
<li><strong>提高我们的工作效率</strong>。卡片盒笔记法通过提供明确的指导来简化我们的工作流程。明确的流程反过来又会减少使用该方法的难度。在使用卡片盒笔记系统来管理笔记的过程中，我们会感觉到效率的提高。我甚至每周都会有两天时间将卡片盒笔记系统作为我的首要任务，让自己沉浸于写卡片盒笔记的 *心流(flow)*之中。</li>
<li><strong>不再浪费我们的付出</strong>。即便你的笔记无法用于当下正在做的事情，你也会未来的项目储备知识，至少会提高你对该主题相关信息的处理深度。因为你可以很轻松的根据笔记之间的联系找到过去记的笔记。</li>
<li><strong>让我们解决更复杂的问题</strong>。处理复杂的问题时，你很难一次性将它全部解决。卡片盒笔记法可以让你集中精力处理问题的一小部分，然后再退一步，用全景的眼光去看这个问题。</li>
<li><strong>我们的笔记不会混乱</strong>。常规的笔记法，时间长了会变成臃肿不堪乱成一团。而卡片盒笔记系统则会根据你所要解决的问题的自动调整自己的规模。这是卢曼提到的<a href="https://luhmann.surge.sh/communicating-with-slip-boxes">内生长(internal growth)</a>，我更愿意将其翻译为<strong>有机生长</strong>(organic growth，寓意像生命体一样自然生长)。</li>
<li><strong>让写作更容易，更顺畅，更有条理和说服力</strong>。写作和思考的一个主要问题是，我们很难长时间保持写作的思绪(line of thought)不断。冥想时尚且很难将注意力集中于呼吸这样简单的事情，更不用说为了写一篇论文而在几周甚至几个月里都思考同一个问题。而Z卡片盒笔记法以帮你牢牢抓住你对问题的各种想法，并让这些想法保持活力不会丢失。</li>
</ol>
<p>为了有效的解决解决问题，我们必须记笔记。用卢曼的话说：</p>
<blockquote>
<p>思考一下，我们要用写下的东西来做什么？当然，开始时我们做的笔记大部分都是垃圾。但是，我们所受的教育期望我们从所做的事情中得到一些有用的东西，如果没有任何有用的结果，我们很快就会失去信心。我们应该反思，是否对笔记进行了管理，以及如何有效的管理这些笔记，以便未来可以查阅。</p>
</blockquote>
<p>更多内容请参考原文</p>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>方法论</tag>
        <tag>笔记</tag>
        <tag>Zettelkasten</tag>
      </tags>
  </entry>
  <entry>
    <title>杜威十进分类法</title>
    <url>/2021/05/30/%E6%9D%9C%E5%A8%81%E5%8D%81%E8%BF%9B%E5%88%86%E7%B1%BB%E6%B3%95/</url>
    <content><![CDATA[<p>&lt;%+ tp.file.rename(tp.frontmatter.title) %&gt;</p>
<p><code>updated: &lt;%+ tp.file.last_modified_date() %&gt;</code></p>
<hr>
<h1 id="lt-tp-frontmatter-title-gt"><a href="#lt-tp-frontmatter-title-gt" class="headerlink" title="&lt;%+ tp.frontmatter.title %&gt;"></a>&lt;%+ tp.frontmatter.title %&gt;</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>《杜威十进分类法》(Dewey Decimal Classification,DC/DDC)受美国圣路易斯市图书馆哈利斯分类法的影响，根据17世纪英国哲学家培根关于知识分类的思想 ，将人类知识 分为记忆（历史）、想象（文艺）和理性（哲学、即科学）三大部分，并将其倒置排列，展开为10个大类（下列类名引自DC第20版）。</p>
<h2 id="目录体系"><a href="#目录体系" class="headerlink" title="目录体系"></a>目录体系</h2><p>000　总论</p>
<p>100　哲学</p>
<p>200　宗教</p>
<p>300　社会科学</p>
<p>400　语言</p>
<p>500　自然科学和数学</p>
<p>600　技术（应用科学）</p>
<p>700　艺术、美术和装饰艺术</p>
<p>800　文学</p>
<p>900　地理、历史及辅助学科</p>
<p>DC第20版共 4卷，除主表外，还包括附表（辅助表）、索引及使用手册等。</p>
<p>附表包括：</p>
<p>①标准<a href="https://baike.baidu.com/item/%E5%A4%8D%E5%88%86%E8%A1%A8">复分表</a>，</p>
<p>②地区复分表，</p>
<p>③文学复分表，</p>
<p>④语言复分表，</p>
<p>⑤人种、种族、民族复分表，</p>
<p>⑥语种复分表，</p>
<p>⑦人物复分表。</p>
<p><a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E7%AC%A6%E5%8F%B7">标记符号</a></p>
<p>DC采用阿拉伯数字作标记符号，并采用小数制（即十进制）的<a href="https://baike.baidu.com/item/%E5%B1%82%E7%B4%AF%E6%A0%87%E8%AE%B0%E5%88%B6/53941462">层累标记制</a>。以三位数(000～999)形成前三级的等级结构。在三位数中，凡带“0” 的号码均表示总论性类目：后二位为“0” 的号码表示一级类（大类），末一位为“0” 的号码表示二级类，凡末尾不带“0” 的三位数号码均属三级类。凡在三位数之后展开的号码，均须在三位数后面加一小数点隔开。</p>
<p>例如：</p>
<p>600　应用科学</p>
<p>630　农业</p>
<p>631　农业经营</p>
<p>631.5　作物栽培</p>
<h2 id="分类特点"><a href="#分类特点" class="headerlink" title="分类特点"></a>分类特点</h2><p>①体系结构完整、严谨，类目详尽，层次清楚，易于理解，便于按学科进行检索。</p>
<p>②采用严格的层累标记制，类号等级分明，具有较强的助记性，但有时号码过于冗长。</p>
<p>③首创仿分、复分等具有组配性质的编号法。</p>
<p>④最先为分类表编配详细的相关索引，提供一条简便的字顺检索的途径。</p>
<p>⑤ 拥有实力雄厚的管理机构，定期修订，使分类法不断得到更新。</p>
]]></content>
      <categories>
        <category>方法论</category>
      </categories>
      <tags>
        <tag>方法论</tag>
        <tag>笔记</tag>
        <tag>分类法</tag>
        <tag>杜威十进制分类法</tag>
      </tags>
  </entry>
  <entry>
    <title>parcel包使用注意事项</title>
    <url>/2021/06/30/parcel%E5%8C%85%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>&lt;%+ tp.file.rename(tp.frontmatter.title) %&gt;</p>
<p><code>updated: &lt;%+ tp.file.last_modified_date() %&gt;</code></p>
<hr>
<h1 id="lt-tp-frontmatter-title-gt"><a href="#lt-tp-frontmatter-title-gt" class="headerlink" title="&lt;%+ tp.frontmatter.title %&gt;"></a>&lt;%+ tp.frontmatter.title %&gt;</h1><p>如果在CM界面上无法对parcel包进行正确的操作，可以使用<a href="https://archive.cloudera.com/cm6/6.3.1/generic/jar/cm_api/apidocs/resource_ParcelResource.html">对应API</a>。</p>
<h2 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h2><h3 id="远程存储库分发"><a href="#远程存储库分发" class="headerlink" title="远程存储库分发"></a>远程存储库分发</h3><p>当采用httpd进行parcel分发时，如果遇到哈希验证失败的问题：</p>
<ol>
<li><p>检查/etc/httpd/conf/httpd.conf是否配置.parcel</p>
</li>
<li><p>重启httpd、cloudera-scm-server</p>
</li>
<li><p>低级错误：校验码不对，manifest错误</p>
</li>
</ol>
<h3 id="本地存储库分发"><a href="#本地存储库分发" class="headerlink" title="本地存储库分发"></a>本地存储库分发</h3><p>重新分发重新打包后的parcel时：</p>
<ol>
<li><p>不要删除旧包后立马上传分发</p>
</li>
<li><p>确认旧包已完全删除，未隐藏(find / -name PARCELNAME.parcel)，否则不会分发新包，而是分发“已删除”的旧包。旧包在隐藏的<code>.flood</code>目录下<br> ![[../../../../../../900其他/920Image/csimg/c/s/i/m/g/Pasted image 20210630104112.png]]</p>
</li>
</ol>
<p>==上述操作对远程分发同样有效。==</p>
<h2 id="服务状态"><a href="#服务状态" class="headerlink" title="服务状态"></a>服务状态</h2><p>安装完服务后，可能会显示服务状态不可用，图表也显示不出来，这时候需要重启cm的monitor，等一会儿就行了。</p>
<p>原因是添加新CSD后未更新。</p>
]]></content>
      <categories>
        <category>cdh</category>
      </categories>
      <tags>
        <tag>parcel</tag>
      </tags>
  </entry>
  <entry>
    <title>制作csd</title>
    <url>/2021/06/29/%E5%88%B6%E4%BD%9Ccsd/</url>
    <content><![CDATA[<p>&lt;%+ tp.file.rename(tp.frontmatter.title) %&gt;</p>
<p><code>updated: &lt;%+ tp.file.last_modified_date() %&gt;</code></p>
<hr>
<h1 id="lt-tp-frontmatter-title-gt"><a href="#lt-tp-frontmatter-title-gt" class="headerlink" title="&lt;%+ tp.frontmatter.title %&gt;"></a>&lt;%+ tp.frontmatter.title %&gt;</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>略</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>首先观察CSD结构，如下图所示：</p>
<p>![[../../../../../../900其他/920Image/csimg/c/s/i/m/g/csd.png]]</p>
<p>主要有三大块：</p>
<ol>
<li><p>descriptor，json形式的配置文件，用于CM组件界面，其包括两部分</p>
<ol>
<li>service.mdl，对应组件图表库里的图表，可选。</li>
<li>service.sdl，对应组件的配置。组件所涉及的所有配置都在该文件内。CSD的主要内容之一。</li>
</ol>
</li>
<li><p>images，组件图片，建议16*16.png。CDH不支持svg</p>
</li>
<li><p>scripts，组件运行的所有脚本都在此文件夹下</p>
<ol>
<li>control.sh，实际控制组件各种行为的脚本。CSD的主要内容之一。</li>
<li>其他脚本。用于辅助control.sh。</li>
</ol>
</li>
</ol>
<h2 id="service-sdl"><a href="#service-sdl" class="headerlink" title="service.sdl"></a>service.sdl</h2><p>下面给一个简单的例子，详细的含义参见<a href="https://github.com/cloudera/cm_ext/wiki/Service-Descriptor-Language-Reference">官方文档</a>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ATLAS&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Atlas&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Atlas is a scalable and extensible set of core foundational governance services&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,#csd版本</span><br><span class="line">    <span class="attr">&quot;compatibility&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cdhVersion&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;min&quot;</span>: <span class="string">&quot;6.0.0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;runAs&quot;</span>: &#123;#角色</span><br><span class="line">        <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;atlas&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;atlas&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;images/icon.png&quot;</span>,#图标</span><br><span class="line">    <span class="attr">&quot;rolesWithExternalLinks&quot;</span>: [#atlas面板上的链接</span><br><span class="line">        <span class="string">&quot;ATLAS_WEBSERVER&quot;</span>#下方角色的链接</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;roles&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ATLAS_WEBSERVER&quot;</span>,#角色名</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Atlas Server&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;pluralLabel&quot;</span>: <span class="string">&quot;Atlas Servers&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;parameters&quot;</span>: [#配置中可修改的各类参数</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;server_web_port&quot;</span>,#参数名</span><br><span class="line">                    <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Server WebUI Port&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Port of the Server&#x27;s web interface.&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;configName&quot;</span>: <span class="string">&quot;atlas.server.http.port&quot;</span>,#对应的配置</span><br><span class="line">                    <span class="attr">&quot;required&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;port&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;default&quot;</span>: <span class="number">21001</span>#默认值</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;startRunner&quot;</span>: &#123;#启动</span><br><span class="line">                <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;scripts/control.sh&quot;</span>,#对应的脚本</span><br><span class="line">                <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;start&quot;</span>#对应的脚本参数</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;environmentVariables&quot;</span>: &#123;#可配置环境变量，在control中可直接使用</span><br><span class="line">                    <span class="attr">&quot;WEBSERVER_PORT&quot;</span>: <span class="string">&quot;$&#123;server_web_port&#125;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;stopRunner&quot;</span>: &#123;#停止</span><br><span class="line">                <span class="attr">&quot;runner&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;scripts/control.sh&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;stop&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;externalLink&quot;</span>: &#123;#atlas server的链接</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;server_web_ui&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Server Web UI&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://$&#123;host&#125;:$&#123;server_web_port&#125;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;logging&quot;</span>: &#123;#角色日志所在位置</span><br><span class="line">                <span class="attr">&quot;loggingType&quot;</span>: <span class="string">&quot;log4j&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;filename&quot;</span>: <span class="string">&quot;application.log&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;dir&quot;</span>: <span class="string">&quot;/opt/cloudera/parcels/ATLAS/lib/atlas/logs&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;configName&quot;</span>: <span class="string">&quot;log.dir&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;modifiable&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;serviceDependencies&quot;</span>: [#安装向导中的依赖，默认值为<span class="literal">false</span>；声明对服务的依赖关系，意味着所有依赖关系的客户端配置也将部署到流程目录中。如：添加zk依赖后，能直接使用ZK_QUORUM环境变量。注意：kafka依赖在cm7之后支持。</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ZOOKEEPER&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;required&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;HBASE&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;required&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;SOLR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;required&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="control-sh"><a href="#control-sh" class="headerlink" title="control.sh"></a>control.sh</h2><p>下面给一个简单的例子，详细的使用参见<a href="https://github.com/cloudera/cm_ext/wiki/Control-Scripts">官方文档</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出详细执行日志</span></span><br><span class="line">set -x</span><br><span class="line"></span><br><span class="line">CMD=$1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line">export ATLAS_HOME=/opt/cloudera/parcels/ATLAS/lib/atlas</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> /opt/cloudera/parcels/CS/meta/cs_env.sh</span></span><br><span class="line"></span><br><span class="line">case $CMD in</span><br><span class="line">    (start)#编写程序启动的代码</span><br><span class="line">    echo &quot;Starting the web server on port [$WEBSERVER_PORT]&quot;</span><br><span class="line">    exec $JAVA_HOME/bin/java -Datlas.log.dir=$ATLAS_HOME/logs -Datlas.log.file=application.log -Datlas.home=$ATLAS_HOME -Datlas.conf=$ATLAS_HOME/conf -Xmx1024m -Dlog4j.configuration=atlas-log4j.xml -Djava.net.preferIPv4Stack=true -server -classpath $ATLAS_HOME/conf:$ATLAS_HOME/server/webapp/atlas/WEB-INF/classes:$ATLAS_HOME/server/webapp/atlas/WEB-INF/lib/*:$ATLAS_HOME/libext/*:$ATLAS_HOME/conf/hbase/conf org.apache.atlas.Atlas -app $ATLAS_HOME/server/webapp/atlas</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    (stop)</span><br><span class="line">    # 调用自带的stop，其需要pid信息</span><br><span class="line">    touch $ATLAS_HOME/logs/atlas.pid</span><br><span class="line">    echo $PID_TO_STOP &gt; $ATLAS_HOME/logs/atlas.pid</span><br><span class="line">    echo &quot;Stoping the web server……&quot;</span><br><span class="line">    exec $ATLAS_HOME/bin/atlas_stop.py</span><br><span class="line">    ;;</span><br><span class="line">    (*)</span><br><span class="line">    echo &quot;Don&#x27;t understand [$CMD]&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd atlas-csd/</span><br><span class="line">jar -cvf atlas-1.0.jar ./*</span><br></pre></td></tr></table></figure>

<h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><p>下载校验文件：<code>git clone https://github.com/cloudera/cm_ext.git</code></p>
<p>然后编译：<code>mvn install -Dmaven.test.skip=true</code></p>
<p>校验代码：<code>java -jar cm_ext/validator/target/validator.jar -s atlas-csd/descriptor/service.sdl</code></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在前期测试集群调试CSD的时候我们可以使用官方自带的开发工具进行快速操作，而不用重启clloudera-scm-server，详细的文档介绍见<a href="https://github.com/cloudera/cm_ext/wiki/CSD-Developer-Tricks-and-Tools#partial-installation-development-mode-only">CSD-Developer-Tricks-and-Tools</a>。</p>
<table>
<thead>
<tr>
<th>操作类型</th>
<th>对应API</th>
</tr>
</thead>
<tbody><tr>
<td><code>List</code></td>
<td><code>GET  /cmf/csd/list</code></td>
</tr>
<tr>
<td><code>Refresh</code></td>
<td><code>GET  /cmf/csd/refresh</code></td>
</tr>
<tr>
<td><code>Install</code></td>
<td><code>GET  /cmf/csd/install?csdName=&lt;name&gt;</code></td>
</tr>
<tr>
<td><code>Uninstall</code></td>
<td><code>GET  /cmf/csd/uninstall?csdName=&lt;name&gt;</code></td>
</tr>
<tr>
<td><code>Reinstall</code></td>
<td><code>GET  /cmf/csd/reinstall?csdName=&lt;name&gt;</code></td>
</tr>
</tbody></table>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/cloudera/cm_ext/wiki/CSD-Primer">CSD-Primer官方文档</a></p>
]]></content>
      <categories>
        <category>cdh</category>
      </categories>
      <tags>
        <tag>parcel</tag>
        <tag>cdh</tag>
        <tag>csd</tag>
      </tags>
  </entry>
  <entry>
    <title>制作parcel包</title>
    <url>/2021/06/15/%E5%88%B6%E4%BD%9Cparcel%E5%8C%85/</url>
    <content><![CDATA[<p>&lt;%+ tp.file.rename(tp.frontmatter.title) %&gt;</p>
<p><code>updated: &lt;%+ tp.file.last_modified_date() %&gt;</code></p>
<hr>
<h1 id="lt-tp-frontmatter-title-gt"><a href="#lt-tp-frontmatter-title-gt" class="headerlink" title="&lt;%+ tp.frontmatter.title %&gt;"></a>&lt;%+ tp.frontmatter.title %&gt;</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Parcel的好处及优势这里就不多赘述，详细内容见<a href="https://github.com/cloudera/cm_ext/wiki/Why-you-should-use-parcels">官方文档</a>。</p>
<p>==需要特别注意的是要严格按照命名格式操作。==</p>
<p>下面对Parcel包的制作进行简单介绍。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>首先我们要了解Parcel包的结构，详细的内容见<a href="https://github.com/cloudera/cm_ext/wiki/Building-a-parcel">官方文档</a>。</p>
<p>其必须包含两部分内容：</p>
<ol>
<li>meta目录。至少包括parcel.json、env.sh。一个是Parcel包的基本信息，一个是环境信息。<br>==注意：在与CDH或其他软件结合使用时，是否需要绑定版本号==</li>
<li>lib目录。其下就是我们打包的组件存储的位置</li>
</ol>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>强烈建议在linux上进行打包，并加上-p参数以保留受保护的信息（如：<strong>软链</strong>、权限等），通过在linux上打包并配置软链、权限……可以避免在control.sh中编写过多的命令，同时避免了非root用户的部分命令的权限问题。</p>
<p>这一部分需要耐心整理组件安装步骤，抽取出不在组件内（编译后）的内容，比如日志软链，并结合组件的安装进行反复操作。</p>
<p>不推荐：<del>tar zcvf ATLAS-2.0.0-CDH6.3.2-el7.parcel ATLAS-2.0.0-CDH6.3.2/</del></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar zcvfp ECHO-0.0.1-el7.parcel ECHO-0.0.1/</span><br><span class="line">sha1sum ATLAS-2.0.0-CDH6.3.2-el7.parcel &gt; ATLAS-2.0.0-CDH6.3.2-el7.parcel.sha</span><br></pre></td></tr></table></figure>


<p><strong>制作manifest.json</strong></p>
<p> <code>./cm_ext/make_manifest/make_manifest.py ./ELK/</code></p>
<p><code>./ELK目录下有对应的parcel包</code></p>
<p>最后完整的目录如下：<br>![[../../../../../../900其他/920Image/csimg/c/s/i/m/g/Pasted image 20210629165244.png]]</p>
<h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><ol>
<li>Validate a parcel.json file <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./validator -p parcel.json</span></span><br><span class="line"></span><br><span class="line">java -jar ./cm_ext/validator/target/validator.jar -p ./ATLAS-2.0.0-CDH6.3.2/meta/parcel.json</span><br></pre></td></tr></table></figure>
</li>
<li>Validate an alternatives.json file <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./validator -a alternatives.json</span></span><br></pre></td></tr></table></figure>
</li>
<li>Validate an permissions.json file <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./validator -r permissions.json</span></span><br></pre></td></tr></table></figure>
</li>
<li>Validate a parcel directory <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./validator -d CDH-5.0.0-0.cdh5b2.p0.283/</span></span><br><span class="line"></span><br><span class="line">java -jar ./cm_ext/validator/target/validator.jar -d ./ATLAS-2.0.0-CDH6.3.2/</span><br></pre></td></tr></table></figure>
</li>
<li>Validate a parcel file <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./validator -f CDH-5.0.0-0.cdh5b2.p0.283-el6.parcel</span></span><br><span class="line"></span><br><span class="line">java -jar ./cm_ext/validator/target/validator.jar -f ATLAS-2.0.0-CDH6.3.2-el7.parcel</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/cloudera/cm_ext/wiki">官方文档</a></p>
]]></content>
      <categories>
        <category>cdh</category>
      </categories>
      <tags>
        <tag>parcel</tag>
        <tag>cdh</tag>
      </tags>
  </entry>
</search>
